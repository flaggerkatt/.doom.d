;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-;; Place your private configuration here! Remember, you do not need to run 'doom;; sync' after modifying this file!;; Some functionality uses this to identify you, e.g. GPG configuration, email;; clients, file templates and snippets.(setq user-full-name "Per-Karsten Nordhaug"      user-mail-address "flaggerkatt@gmail.com");; Doom exposes five (optional) variables for controlling fonts in Doom. Here;; are the three important ones:;;;; + `doom-font';; + `doom-variable-pitch-font';; + `doom-big-font' -- used for `doom-big-font-mode'; use this for;;   presentations or streaming.;;;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd;; font string. You generally only need these two: (setq doom-font (font-spec :family "Fira Code" :size 12)       doom-variable-pitch-font (font-spec :family "Overpass" :size 12)       doom-big-font (font-spec :family "Fira Code" :size 14));; There are two ways to load a theme. Both assume the theme is installed and;; available. You can either set `doom-theme' or manually load a theme with the;; `load-theme' function. This is the default:(setq doom-theme 'doom-nord);; If you use `org' and don't want your org files in the default location below,;; change `org-directory'. It must be set before org loads!(setq org-directory "~/Dropbox/org/")(setq org-default-notes-file (concat org-directory "~/Dropbox/org/"))(setq org-agenda-files (append                        '("~/.tasks.org")                        (directory-files-recursively "~/Dropbox/org/" "\\`[^.].*\\.org\\'")));; This determines the style of line numbers in effect. If set to `nil', line;; numbers are disabled. For relative line numbers, set this to `relative'.(setq display-line-numbers-type 'relative)(setq fancy-splash-image (concat doom-private-dir "splash/emacs-e.svg"));; Here are some additional functions/macros that could help you configure Doom:;;;; - `load!' for loading external *.el files relative to this one;; - `use-package' for configuring packages;; - `after!' for running code after a package has loaded;; - `add-load-path!' for adding directories to the `load-path', relative to;;   this file. Emacs searches the `load-path' when you load packages with;;   `require' or `use-package'.;; - `map!' for binding new keys;;;; To get information about any of these functions/macros, move the cursor over;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').;; This will open documentation for it, including demos of how they are used.;;;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how;; they are implemented.;; Suppress warnings below Emergency level?(setq warning-minimum-level :emergency);; Clearing some unwanted keybindigs;;(global-set-key (kbd "C-z") nil);(global-set-key (kbd "s-z") nil);(global-set-key (kbd "M-z") nil)(global-set-key (kbd "M-/") nil);; Setting some other basic stuffz;;(setq kill-whole-line t);; Standard placement and style of frame;; (add-to-list 'default-frame-alist '(top . 12));; (add-to-list 'default-frame-alist '(left . 1));; (add-to-list 'default-frame-alist '(width . 148));; (add-to-list 'default-frame-alist '(height . 47))(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))(add-to-list 'default-frame-alist '(ns-appearance . dark));; Basic settings for swiper/counsel: search with C-s, buffer-switching with C-x b(global-set-key (kbd "C-s") 'swiper)(global-set-key (kbd "C-z s") 'counsel-rg)(global-set-key (kbd "C-z b") 'counsel-buffer-or-recentf)(global-set-key (kbd "C-x b") 'counsel-switch-buffer)(global-set-key (kbd "<next>") 'forward-paragraph)(global-set-key (kbd "<prior>") 'backward-paragraph)(global-set-key (kbd "C-c C-e") 'elfeed)(global-set-key (kbd "C-c C-u") 'mu4e)(global-set-key (kbd "s-b") 'switch-to-buffer);; YASnippets;; Develop in ~/doom.d/snippets, but also try out snippets in ~/Dropbox/emacs/snippets;;(setq yas-snippet-dirs '("~/doom.d/snippets"                         "~/Dropbox/emacs/snippets"));; Elfeed Configuration;; An Emacs web feeds client;;;; functions to support .elfeed(defun pkn/elfeed-load-db-and-open ()  "Wrapper to load the elfeed db from disk before opening"  (interactive)  (elfeed)  (elfeed-search-update--force));; write to disk when quiting(defun pkn/elfeed-save-db-and-bury ()  "Wrapper to save the elfeed db to disk before burying buffer"  (interactive)  (elfeed-db-save)  (quit-window))(defun elfeed-eww-open (&optional use-generic-p)  "open with eww"  (interactive "P")  (let ((entries (elfeed-search-selected)))    (cl-loop for entry in entries             do (elfeed-untag entry 'unread)             when (elfeed-entry-link entry)             do (eww-browse-url it))    (mapc #'elfeed-search-update-entry entries)    (unless (use-region-p) (forward-line))))(use-package! elfeed  :bind (:map elfeed-search-mode-map          ("q" . pkn/elfeed-save-db-and-bury)	  ("Q" . pkn/elfeed-save-db-and-bury)	  ("m" . elfeed-toggle-star)	  ("M" . elfeed-toggle-star)          ("j" . pkn/make-and-run-elfeed-hydra)	  ("J" . pkn/make-and-run-elfeed-hydra)          ("w" . elfeed-eww-open)          ("W" . elfeed-eww-open)          )  :config  (elfeed-set-max-connections 32)  (defalias 'elfeed-toggle-star    (elfeed-expose #'elfeed-search-toggle-all 'star))  )(use-package! elfeed-goodies  :config  (elfeed-goodies/setup))(use-package! elfeed-org  :init  (setq rmh-elfeed-org-files '("~/Dropbox/org/elfeed.org"))  :config  (elfeed-org));; Set deft directory and sorting;;;;(use-package! deft  :bind (("C-c C-d" . deft)         ("C-x C-g" . deft-find-file))  :commands (deft)  :config (setq deft-directory "~/Dropbox/org/deft/"                deft-extensions '("md" "org" "txt")                deft-current-sort-method 'title                deft-recursive t                ));; Settings for org-mode and related shit;;;;(setq org-agenda-files      (quote (              "~/Dropbox/deft"              "~/Dropbox/org")));; set maximum indentation for description lists(setq org-list-description-max-indent 5);; prevent demoting heading also shifting text inside sections(setq org-adapt-indentation nil)(use-package! org-sidebar);; ALL HAIL HYDRA?;; Tie related commands into a family of short bindings with a common prefix - a hydra;;;; Major mode hydra and pretty-hydra(use-package! major-mode-hydra  :preface  (defun with-faicon (icon str &optional height v-adjust)    "Displays an icon from Font Awesome icon."    (s-concat (all-the-icons-faicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))  (defun with-alltheicon (icon str &optional height v-adjust)    "Displays an icon from all-the-icon."    (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))  (defun with-fileicon (icon str &optional height v-adjust)    "Displays an icon from the Atom File Icons package."    (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))  (defun with-octicon (icon str &optional height v-adjust)    "Displays an icon from the GitHub Octicons."    (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1)) " " str))  :bind  ("M-SPC" . major-mode-hydra))(major-mode-hydra-define emacs-lisp-mode nil  ("Eval"   (("b" eval-buffer "buffer")    ("e" eval-defun "defun")    ("r" eval-region "region"))   "REPL"   (("I" ielm "ielm"))   "Test"   (("t" ert "prompt")    ("T" (ert t) "all")    ("F" (ert :failed) "failed"))   "Doc"   (("d" describe-foo-at-point "thing-at-pt")    ("f" describe-function "function")    ("v" describe-variable "variable")    ("i" info-lookup-symbol "info lookup"))   "Quit"   (("q" nil "quit"))))(defvar pkn-window--title (with-faicon "windows" "Window Management" 1 -0.05));; Rearrange split windows(defun split-window-horizontally-instead ()  "Kill any other windows and re-split such that the current window is on the top half of the frame."  (interactive)  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))    (delete-other-windows)    (split-window-horizontally)    (when other-buffer      (set-window-buffer (next-window) other-buffer))))(defun split-window-vertically-instead ()  "Kill any other windows and re-split such that the current window is on the left half of the frame."  (interactive)  (let ((other-buffer (and (next-window) (window-buffer (next-window)))))    (delete-other-windows)    (split-window-vertically)    (when other-buffer      (set-window-buffer (next-window) other-buffer))))(pretty-hydra-define pkn-window (:foreign-keys warn :title pkn-window--title :quit-key "q")  ("Actions"   (("TAB" other-window "switch")    ("x" ace-delete-window "delete")    ("m" ace-delete-other-windows "maximize")    ("s" ace-swap-window "swap")    ("a" ace-select-window "select"))   "Resize"   (("h" move-border-left "←")    ("j" move-border-down "↓")    ("k" move-border-up "↑")    ("l" move-border-right "→")    ("n" balance-windows "balance")    ("f" toggle-frame-fullscreen "toggle fullscreen"))   "Split"   (("b" split-window-right "horizontally")    ("B" split-window-horizontally-instead "horizontally instead")    ("v" split-window-below "vertically")    ("V" split-window-vertically-instead "vertically instead"))   "Zoom"   (("+" text-scale-increase "in")    ("-" text-scale-decrease "out")    )));; Other hydras...;; Zoom Hydra(defhydra hydra-zoom (global-map "C-+")  "zoom"  ("g" text-scale-increase "in")  ("l" text-scale-decrease "out")  );; Move Hydra(defhydra hydra-move (global-map "C-n")  "move"  ("n" next-line)  ("p" previous-line)  ("f" forward-char)  ("b" backward-char)  ("a" beginning-of-line)  ("e" move-end-of-line)  ("v" scroll-up-command)  ;; Converting M-v to V here by analogy.  ("V" scroll-down-command)  ("l" recenter-top-bottom)  );; Magit Hydra(defhydra hydra-magit (global-map "C-c m")  "magit"  ("b" magit-blame "blame")  ("c" magit-clone "clone")  ("i" magit-init "init")  ("l" magit-log-buffer-file "commit log (current file)")  ("L" magit-log-current "commit log (project)")  ("s" magit-status "status")  );; Elfeed hydra(defun pkn/hasCap (s) ""	     (let ((case-fold-search nil))	       (string-match-p "[[:upper:]]" s)	       ))(defun pkn/get-hydra-option-key (s)  "returns single upper case letter (converted to lower) or first"  (interactive)  (let ( (loc (pkn/hasCap s)))    (if loc	      (downcase (substring s loc (+ loc 1)))	    (substring s 0 1)      )));;  (active blogs cs eDucation emacs local misc sports star tech unread webcomics)(defun pkn/make-elfeed-cats (tags)  "Returns a list of lists. Each one is line for the hydra configuratio in the form       (c function hint)"  (interactive)  (mapcar (lambda (tag)	          (let* (		               (tagstring (symbol-name tag))		               (c (pkn/get-hydra-option-key tagstring))		               )		          (list c (append '(elfeed-search-set-filter) (list (format "@2-week-ago +unread +%s" tagstring) ))tagstring  )))	        tags))(defmacro pkn/make-elfeed-hydra ()  `(defhydra pkn/hydra-elfeed ()     "filter"     ,@(pkn/make-elfeed-cats (elfeed-db-get-all-tags))     ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")     ("M" elfeed-toggle-star "Mark")     ("A" (elfeed-search-set-filter "@2-week-ago +unread") "All")     ("T" (elfeed-search-set-filter "@1-day-ago +unread") "Today")     ("Q" pkn/elfeed-save-db-and-bury "Quit Elfeed" :color blue)     ("q" nil "quit" :color blue)     ))(defun pkn/make-and-run-elfeed-hydra ()  ""  (interactive)  (pkn/make-elfeed-hydra)  (pkn/hydra-elfeed/body))(defun my-elfeed-tag-sort (a b)  (let* ((a-tags (format "%s" (elfeed-entry-tags a)))         (b-tags (format "%s" (elfeed-entry-tags b))))    (if (string= a-tags b-tags)        (< (elfeed-entry-date b) (elfeed-entry-date a)))    (string< a-tags b-tags)))(setf elfeed-search-sort-function #'my-elfeed-tag-sort)(setq elfeed-sort-order 'ascending)(setq elfeed-search-filter "@2-week-ago +unread ")(use-package! nyan-mode  :custom  (nyan-cat-face-number 4)  (nyan-animate-nyancat nil)  :hook  (doom-modeline-mode . nyan-mode)  );;;; ALL HAIL HYDRA!;;;; MU4E configuration;; mu4e is an email client for Emacs. It’s based on the mu email indexer/searcher.;;(after! mu4e  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")  (set-email-account! "gmail"                      '((mu4e-sent-folder       . "/gmail/Sent")                        (mu4e-drafts-folder     . "/gmail/[Gmail]/Drafts")                        (mu4e-trash-folder      . "/gmail/[Gmail]/Trash")                        (mu4e-refile-folder     . "/gmail/[Gmail]/All Mail")                        (smtpmail-smtp-user     . "flaggerkatt@gmail.com")                        (mu4e-compose-signature . "It is the peculiarity of privilege and of every privileged position to kill the intellect and heart of man.\nThe privileged man, whether he be privileged politically or economically, is a man depraved in intellect and heart (M. Bakunin)"))                      t)  ;; mu maildir  (setq mu4e-maildir "~/.maildir")  ;; mbsync to get mail, and update every 5 minutes  (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))  (setq mu4e-update-interval 300)  ;; save attachments to Downloads folder  by default  (setq mu4e-attachment-dir "~/Downloads")  ;; rename files when moving - needed for mbsync:  (setq mu4e-change-filenames-when-moving t)  ;; mu4e-favorites  (setq mu4e-maildir-shortcuts        '(("/gmail/INBOX" . ?i)        ("/gmail/[Gmail]/All Mail" . ?a)        ("/gmail/[Gmail]/Drafts" . ?d)        ("/gmail/Sent" . ?s)        ("/gmail/[Gmail]/Trash" . ?t)        ))  (add-to-list 'mu4e-bookmarks               '(:name "Yesterday's messages" :query "date:2d..1d" :key ?y) t)  ;; don't keep message compose buffers around after sending:  (setq message-kill-buffer-on-exit t)  ;; send function:  (setq send-mail-function 'sendmail-send-it        message-send-mail-function 'sendmail-send-it)  ;; send program:  (setq sendmail-program (executable-find "msmtp"))  ;; select the right sender email from the context.  (setq message-sendmail-envelope-from 'header)  ;; don't need to run cleanup after indexing for gmail  (setq mu4e-index-cleanup nil        ;; because gmail uses labels as folders we can use lazy check since        ;; messages don't really "move"        mu4e-index-lazy-check t)  (setq mu4e-compose--org-msg-toggle-next nil)  );; fix auth stuff(after! auth-source (setq auth-sources (nreverse auth-sources)));;;; EXPERIMENTAL SH*T;;(use-package! org-web-tools  :config (setq org-web-tools-pandoc-sleep-time 1.0));; Org-roam;;(setq org-roam-directory "~/Dropbox/org/deft")(org-roam-db-autosync-mode);; Use minions to hide minor modes(use-package! minions  :config  (setq minions-mode-line-lighter ""        minions-mode-line-delimiters '("" . ""))  (minions-mode 1))(use-package! ts)(use-package! mpv)(use-package! noflet)(use-package elfeed-tube  :after elfeed  :demand t  :config  ;; (setq elfeed-tube-auto-save-p nil) ;; t is auto-save (not default)  ;; (setq elfeed-tube-auto-fetch-p t) ;;  t is auto-fetch (default)  (elfeed-tube-setup)  :bind (:map elfeed-show-mode-map         ("F" . elfeed-tube-fetch)         ([remap save-buffer] . elfeed-tube-save)         :map elfeed-search-mode-map         ("F" . elfeed-tube-fetch)         ([remap save-buffer] . elfeed-tube-save)))(use-package elfeed-tube-mpv  :bind (:map elfeed-show-mode-map              ("C-c C-f" . elfeed-tube-mpv-follow-mode)              ("C-c C-w" . elfeed-tube-mpv-where)));; Org Capture in a small separate frame(defun pkn-func-make-capture-frame ()  "Create a new frame and run `org-capture'."  (interactive)  (make-frame '((name . "capture")                (top . 300)                (left . 700)                (width . 80)                (height . 25)))  (select-frame-by-name "capture")  (delete-other-windows)  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))          (org-capture)))(defadvice org-capture-finalize    (after delete-capture-frame activate)  "Advise capture-finalize to close the frame."  (if (equal "capture" (frame-parameter nil 'name))      (delete-frame)))(defadvice org-capture-destroy    (after delete-capture-frame activate)  "Advise capture-destroy to close the frame."  (if (equal "capture" (frame-parameter nil 'name))      (delete-frame)));; Set default directory(setq default-directory "~/")