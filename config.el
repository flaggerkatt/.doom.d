;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-;; Place your private configuration here! Remember, you do not need to run 'doom;; sync' after modifying this file!;; Some functionality uses this to identify you, e.g. GPG configuration, email;; clients, file templates and snippets.(setq user-full-name "Per-Karsten Nordhaug"      user-mail-address "flaggerkatt@gmail.com");; Doom exposes five (optional) variables for controlling fonts in Doom. Here;; are the three important ones:;; + `doom-font';; + `doom-variable-pitch-font';; + `doom-big-font' -- used for `doom-big-font-mode'; use this for;;   presentations or streaming.;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd;; font string. You generally only need these two: (setq doom-font (font-spec :family "Iosevka Fixed" :size 13)       doom-variable-pitch-font (font-spec :family "Overpass" :size 12)       doom-big-font (font-spec :family "Iosevka Fixed" :size 15));; There are two ways to load a theme. Both assume the theme is installed and;; available. You can either set `doom-theme' or manually load a theme with the;; `load-theme' function. This is the default:(setq doom-theme 'doom-wilmersdorf);; Dashboard config;;;; Most of this is blatantly stolen from tecosaur :);; Open dashboard(map! :leader :desc "Dashboard" "d" #'+doom-dashboard/open);; Strip unnecessary stuff (comment out first line to actually show menu)(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))(defvar fancy-splash-image-template  (expand-file-name "splash-images/emacs-e-template.svg" doom-private-dir)  "Default template svg used for the splash image, with substitutions from ")(defvar fancy-splash-sizes  `((:height 300 :min-height 50 :padding (0 . 2))    (:height 250 :min-height 42 :padding (2 . 4))    (:height 200 :min-height 35 :padding (3 . 3))    (:height 150 :min-height 28 :padding (3 . 3))    (:height 100 :min-height 20 :padding (2 . 2))    (:height 75  :min-height 15 :padding (2 . 1))    (:height 50  :min-height 10 :padding (1 . 0))    (:height 1   :min-height 0  :padding (0 . 0)))  "list of plists with the following properties  :height the height of the image  :min-height minimum `frame-height' for image  :padding `+doom-dashboard-banner-padding' (top . bottom) to apply  :template non-default template file  :file file to use instead of template")(defvar fancy-splash-template-colours  '(("$colour1" . keywords) ("$colour2" . type) ("$colour3" . base5) ("$colour4" . base8))  "list of colour-replacement alists of the form (\"$placeholder\" . 'theme-colour) which applied the template")(unless (file-exists-p (expand-file-name "theme-splashes" doom-cache-dir))  (make-directory (expand-file-name "theme-splashes" doom-cache-dir) t))(defun fancy-splash-filename (theme-name height)  (expand-file-name (concat (file-name-as-directory "theme-splashes")                            theme-name                            "-" (number-to-string height) ".svg")                    doom-cache-dir))(defun fancy-splash-clear-cache ()  "Delete all cached fancy splash images"  (interactive)  (delete-directory (expand-file-name "theme-splashes" doom-cache-dir) t)  (message "Cache cleared!"))(defun fancy-splash-generate-image (template height)  "Read TEMPLATE and create an image if HEIGHT with colour substitutions as   described by `fancy-splash-template-colours' for the current theme"  (with-temp-buffer    (insert-file-contents template)    (re-search-forward "$height" nil t)    (replace-match (number-to-string height) nil nil)    (dolist (substitution fancy-splash-template-colours)      (goto-char (point-min))      (while (re-search-forward (car substitution) nil t)        (replace-match (doom-color (cdr substitution)) nil nil)))    (write-region nil nil                  (fancy-splash-filename (symbol-name doom-theme) height) nil nil)))(defun fancy-splash-generate-images ()  "Perform `fancy-splash-generate-image' in bulk"  (dolist (size fancy-splash-sizes)    (unless (plist-get size :file)      (fancy-splash-generate-image (or (plist-get size :template)                                       fancy-splash-image-template)                                   (plist-get size :height)))))(defun ensure-theme-splash-images-exist (&optional height)  (unless (file-exists-p (fancy-splash-filename                          (symbol-name doom-theme)                          (or height                              (plist-get (car fancy-splash-sizes) :height))))    (fancy-splash-generate-images)))(defun get-appropriate-splash ()  (let ((height (frame-height)))    (cl-some (lambda (size) (when (>= height (plist-get size :min-height)) size))             fancy-splash-sizes)))(setq fancy-splash-last-size nil)(setq fancy-splash-last-theme nil)(defun set-appropriate-splash (&rest _)  (let ((appropriate-image (get-appropriate-splash)))    (unless (and (equal appropriate-image fancy-splash-last-size)                 (equal doom-theme fancy-splash-last-theme)))    (unless (plist-get appropriate-image :file)      (ensure-theme-splash-images-exist (plist-get appropriate-image :height)))    (setq fancy-splash-image          (or (plist-get appropriate-image :file)              (fancy-splash-filename (symbol-name doom-theme) (plist-get appropriate-image :height))))    (setq +doom-dashboard-banner-padding (plist-get appropriate-image :padding))    (setq fancy-splash-last-size appropriate-image)    (setq fancy-splash-last-theme doom-theme)    (+doom-dashboard-reload)))(add-hook 'window-size-change-functions #'set-appropriate-splash)(add-hook 'doom-load-theme-hook #'set-appropriate-splash)(defvar splash-phrase-source-folder  (expand-file-name "splash-phrases" doom-private-dir)  "A folder of text files with a fun phrase on each line.")(defvar splash-phrase-sources  (let* ((files (directory-files splash-phrase-source-folder nil "\\.txt\\'"))         (sets (delete-dups (mapcar                             (lambda (file)                               (replace-regexp-in-string "\\(?:-[0-9]+-\\w+\\)?\\.txt" "" file))                             files))))    (mapcar (lambda (sset)              (cons sset                    (delq nil (mapcar                               (lambda (file)                                 (when (string-match-p (regexp-quote sset) file)                                   file))                               files))))            sets))  "A list of cons giving the phrase set name, and a list of files which contain phrase components.")(defvar splash-phrase-set  (nth (random (length splash-phrase-sources)) (mapcar #'car splash-phrase-sources))  "The default phrase set. See `splash-phrase-sources'.")(defun splase-phrase-set-random-set ()  "Set a new random splash phrase set."  (interactive)  (setq splash-phrase-set        (nth (random (1- (length splash-phrase-sources)))             (cl-set-difference (mapcar #'car splash-phrase-sources) (list splash-phrase-set))))  (+doom-dashboard-reload t))(defvar splase-phrase--cache nil)(defun splash-phrase-get-from-file (file)  "Fetch a random line from FILE."  (let ((lines (or (cdr (assoc file splase-phrase--cache))                   (cdar (push (cons file                                     (with-temp-buffer                                       (insert-file-contents (expand-file-name file splash-phrase-source-folder))                                       (split-string (string-trim (buffer-string)) "\n")))                               splase-phrase--cache)))))    (nth (random (length lines)) lines)))(defun splash-phrase (&optional set)  "Construct a splash phrase from SET. See `splash-phrase-sources'."  (mapconcat   #'splash-phrase-get-from-file   (cdr (assoc (or set splash-phrase-set) splash-phrase-sources))   " "))(defun doom-dashboard-phrase ()  "Get a splash phrase, flow it over multiple lines as needed, and make fontify it."  (mapconcat   (lambda (line)     (+doom-dashboard--center      +doom-dashboard--width      (with-temp-buffer        (insert-text-button         line         'action         (lambda (_) (+doom-dashboard-reload t))         'face 'doom-dashboard-menu-title         'mouse-face 'doom-dashboard-menu-title         'help-echo "Random phrase"         'follow-link t)        (buffer-string))))   (split-string    (with-temp-buffer      (insert (splash-phrase))      (setq fill-column (min 70 (/ (* 2 (window-width)) 3)))      (fill-region (point-min) (point-max))      (buffer-string))    "\n")   "\n"))(defadvice! doom-dashboard-widget-loaded-with-phrase ()  :override #'doom-dashboard-widget-loaded  (setq line-spacing 0.2)  (insert   "\n\n"   (propertize    (+doom-dashboard--center     +doom-dashboard--width     (doom-display-benchmark-h 'return))    'face 'doom-dashboard-loaded)   "\n"   (doom-dashboard-phrase)   "\n"));; If you use `org' and don't want your org files in the default location below,;; change `org-directory'. It must be set before org loads!(setq org-directory "~/Dropbox/org/")(setq org-default-notes-file (concat org-directory "~/Dropbox/org/"))(setq org-agenda-files (append                        '("~/.tasks.org")                        (directory-files-recursively "~/Dropbox/org/" "\\`[^.].*\\.org\\'")));; This determines the style of line numbers in effect. If set to `nil', line;; numbers are disabled. For relative line numbers, set this to `relative'.(setq display-line-numbers-type 'relative);; Here are some additional functions/macros that could help you configure Doom:;;;; - `load!' for loading external *.el files relative to this one;; - `use-package' for configuring packages;; - `after!' for running code after a package has loaded;; - `add-load-path!' for adding directories to the `load-path', relative to;;   this file. Emacs searches the `load-path' when you load packages with;;   `require' or `use-package'.;; - `map!' for binding new keys;;;; To get information about any of these functions/macros, move the cursor over;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').;; This will open documentation for it, including demos of how they are used.;;;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how;; they are implemented.;; Suppress warnings below Emergency level?(setq warning-minimum-level :emergency);; Clearing some unwanted keybindigs;;(global-set-key (kbd "C-z") nil);(global-set-key (kbd "s-z") nil);(global-set-key (kbd "M-z") nil)(global-set-key (kbd "M-/") nil);; Setting some other basic stuffz;;(setq kill-whole-line t)(setq doom-fallback-buffer-name "► Doom"      +doom-dashboard-name "► Doom")(setq frame-title-format      '(""        (:eval         (if (s-contains-p org-roam-directory (or buffer-file-name ""))             (replace-regexp-in-string              ".*/[0-9]*-?" "☰ "              (subst-char-in-string ?_ ?  buffer-file-name))           "%b"))        (:eval         (let ((project-name (projectile-project-name)))           (unless (string= "-" project-name)             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))));; Standard placement and style of frame;; (add-to-list 'default-frame-alist '(top . 12));; (add-to-list 'default-frame-alist '(left . 1));; (add-to-list 'default-frame-alist '(width . 182));; (add-to-list 'default-frame-alist '(height . 42))(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))(add-to-list 'default-frame-alist '(ns-appearance . dark))(setq ns-use-proxy-icon nil);; Basic settings for consult: search with C-s, buffer-switching with C-x b(global-set-key (kbd "C-s") 'consult-line)(global-set-key (kbd "C-x b") 'consult-buffer)(global-set-key (kbd "C-z s") 'consult-ripgrep)(global-set-key (kbd "C-.") 'embark-act)(global-set-key (kbd "<escape>") 'keyboard-escape-quit)(global-set-key (kbd "<next>") 'forward-paragraph)(global-set-key (kbd "<prior>") 'backward-paragraph);; Global mapped shortcuts(map! :leader :desc "Mu4e" "C-u" #'mu4e)(map! :leader :desc "Elfeed" "C-e" #'pkn/elfeed-load-db-and-open)(map! :leader :desc "Deft" "C-d" #'deft);; YASnippets;; Develop in ~/doom.d/snippets, but also try out snippets in ~/Dropbox/emacs/snippets;;(setq yas-snippet-dirs '("~/.doom.d/snippets"                         "~/Dropbox/emacs/snippets"));; Elfeed Configuration;; An Emacs web feeds client(defun pkn/elfeed-load-db-and-open ()  "Wrapper to load the elfeed db from disk before opening"  (interactive)  (elfeed)  (elfeed-search-update--force));; write to disk when quiting(defun pkn/elfeed-save-db-and-bury ()  "Wrapper to save the elfeed db to disk before burying buffer"  (interactive)  (elfeed-db-save)  (quit-window))(defun elfeed-eww-open (&optional use-generic-p)  "open with eww"  (interactive "P")  (let ((entries (elfeed-search-selected)))    (cl-loop for entry in entries             do (elfeed-untag entry 'unread)             when (elfeed-entry-link entry)             do (eww-browse-url it))    (mapc #'elfeed-search-update-entry entries)    (unless (use-region-p) (forward-line))))(use-package! elfeed  :bind (:map elfeed-search-mode-map          ("q" . pkn/elfeed-save-db-and-bury)	  ("Q" . pkn/elfeed-save-db-and-bury)	  ("m" . elfeed-toggle-star)	  ("M" . elfeed-toggle-star)          ("j" . pkn/make-and-run-elfeed-hydra)	  ("J" . pkn/make-and-run-elfeed-hydra)          ("w" . elfeed-eww-open)          ("W" . elfeed-eww-open)          )  :config  (elfeed-set-max-connections 32)  (defalias 'elfeed-toggle-star    (elfeed-expose #'elfeed-search-toggle-all 'star))  )(use-package! elfeed-goodies  :config  (elfeed-goodies/setup))(use-package! elfeed-org  :init  (setq rmh-elfeed-org-files '("~/Dropbox/org/elfeed.org"))  :config  (elfeed-org));; Deft;; Set deft directory and sorting(use-package! deft  :bind ("C-x C-g" . deft-find-file)  :commands (deft)  :config (setq deft-directory "~/Dropbox/org/deft/"                deft-extensions '("md" "org" "txt")                deft-current-sort-method 'title                deft-recursive t                ));; Settings for org-mode and related shit;;(setq org-agenda-files      (quote (              "~/Dropbox/deft"              "~/Dropbox/org")));; set maximum indentation for description lists(setq org-list-description-max-indent 5);; prevent demoting heading also shifting text inside sections(setq org-adapt-indentation nil)(use-package! org-sidebar);; ALL HAIL HYDRA?;; Elfeed hydra(defun pkn/hasCap (s) ""	     (let ((case-fold-search nil))	       (string-match-p "[[:upper:]]" s)	       ))(defun pkn/get-hydra-option-key (s)  "returns single upper case letter (converted to lower) or first"  (interactive)  (let ( (loc (pkn/hasCap s)))    (if loc	      (downcase (substring s loc (+ loc 1)))	    (substring s 0 1)      )));;  (active blogs cs eDucation emacs local misc sports star tech unread webcomics)(defun pkn/make-elfeed-cats (tags)  "Returns a list of lists. Each one is line for the hydra configuratio in the form       (c function hint)"  (interactive)  (mapcar (lambda (tag)	          (let* (		               (tagstring (symbol-name tag))		               (c (pkn/get-hydra-option-key tagstring))		               )		          (list c (append '(elfeed-search-set-filter) (list (format "@2-week-ago +unread +%s" tagstring) ))tagstring  )))	        tags))(defmacro pkn/make-elfeed-hydra ()  `(defhydra pkn/hydra-elfeed ()     "filter"     ,@(pkn/make-elfeed-cats (elfeed-db-get-all-tags))     ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")     ("M" elfeed-toggle-star "Mark")     ("A" (elfeed-search-set-filter "@2-week-ago +unread") "All")     ("T" (elfeed-search-set-filter "@1-day-ago +unread") "Today")     ("Q" pkn/elfeed-save-db-and-bury "Quit Elfeed" :color blue)     ("q" nil "quit" :color blue)     ))(defun pkn/make-and-run-elfeed-hydra ()  ""  (interactive)  (pkn/make-elfeed-hydra)  (pkn/hydra-elfeed/body))(defun my-elfeed-tag-sort (a b)  (let* ((a-tags (format "%s" (elfeed-entry-tags a)))         (b-tags (format "%s" (elfeed-entry-tags b))))    (if (string= a-tags b-tags)        (< (elfeed-entry-date b) (elfeed-entry-date a)))    (string< a-tags b-tags)))(setf elfeed-search-sort-function #'my-elfeed-tag-sort)(setq elfeed-sort-order 'ascending)(setq elfeed-search-filter "@2-week-ago +unread ");;;; ALL HAIL HYDRA!;;;; MU4E configuration;; mu4e is an email client for Emacs. It’s based on the mu email indexer/searcher.;;(after! mu4e  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")  (set-email-account! "gmail"                      '((mu4e-sent-folder       . "/gmail/Sent")                        (mu4e-drafts-folder     . "/gmail/[Gmail]/Drafts")                        (mu4e-trash-folder      . "/gmail/[Gmail]/Trash")                        (mu4e-refile-folder     . "/gmail/[Gmail]/All Mail")                        (smtpmail-smtp-user     . "flaggerkatt@gmail.com")                        (mu4e-compose-signature . "It is the peculiarity of privilege and of every privileged position to kill the intellect and heart of man.\nThe privileged man, whether he be privileged politically or economically, is a man depraved in intellect and heart (M. Bakunin)"))                      t)  ;; mu maildir  (setq mu4e-maildir "~/.maildir")  ;; mbsync to get mail, and update every 5 minutes  (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))  (setq mu4e-update-interval 300)  ;; save attachments to Downloads folder  by default  (setq mu4e-attachment-dir "~/Downloads")  ;; rename files when moving - needed for mbsync:  (setq mu4e-change-filenames-when-moving t)  ;; mu4e-favorites  (setq mu4e-maildir-shortcuts        '(("/gmail/INBOX" . ?i)        ("/gmail/[Gmail]/All Mail" . ?a)        ("/gmail/[Gmail]/Drafts" . ?d)        ("/gmail/Sent" . ?s)        ("/gmail/[Gmail]/Trash" . ?t)        ))  (add-to-list 'mu4e-bookmarks               '(:name "Yesterday's messages" :query "date:2d..1d" :key ?y) t)  ;; don't keep message compose buffers around after sending:  (setq message-kill-buffer-on-exit t)  ;; send function:  (setq send-mail-function 'sendmail-send-it        message-send-mail-function 'sendmail-send-it)  ;; send program:  (setq sendmail-program (executable-find "msmtp"))  ;; select the right sender email from the context.  (setq message-sendmail-envelope-from 'header)  ;; don't need to run cleanup after indexing for gmail  (setq mu4e-index-cleanup nil        ;; because gmail uses labels as folders we can use lazy check since        ;; messages don't really "move"        mu4e-index-lazy-check t)  (setq mu4e-compose--org-msg-toggle-next nil)  (setq doom-modeline-mu4e nil)  )(add-to-list 'load-path "~/Code/mu4e-thread-folding");; fix auth stuff(after! auth-source (setq auth-sources (nreverse auth-sources)));;;; EXPERIMENTAL SH*T;;(use-package! org-web-tools  :config (setq org-web-tools-pandoc-sleep-time 1.0));; Org-roam;;;; (setq org-roam-directory "~/Dropbox/org/deft");; (org-roam-db-autosync-mode);; Use minions to hide minor modes(use-package! minions  :config  (setq minions-mode-line-lighter ""        minions-mode-line-delimiters '("" . ""))  (minions-mode 1))(use-package! ts)(use-package! mpv)(use-package! noflet)(use-package elfeed-tube  :after elfeed  :demand t  :config  ;; (setq elfeed-tube-auto-save-p nil) ;; t is auto-save (not default)  ;; (setq elfeed-tube-auto-fetch-p t) ;;  t is auto-fetch (default)  (elfeed-tube-setup)  :bind (:map elfeed-show-mode-map         ("F" . elfeed-tube-fetch)         ([remap save-buffer] . elfeed-tube-save)         :map elfeed-search-mode-map         ("F" . elfeed-tube-fetch)         ([remap save-buffer] . elfeed-tube-save)))(use-package elfeed-tube-mpv  :bind (:map elfeed-show-mode-map              ("C-c C-f" . elfeed-tube-mpv-follow-mode)              ("C-c C-w" . elfeed-tube-mpv-where)));; Org Capture in a small separate frame(defun pkn-func-make-capture-frame ()  "Create a new frame and run `org-capture'."  (interactive)  (make-frame '((name . "capture")                (top . 300)                (left . 700)                (width . 80)                (height . 25)))  (select-frame-by-name "capture")  (delete-other-windows)  (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))          (org-capture)))(defadvice org-capture-finalize    (after delete-capture-frame activate)  "Advise capture-finalize to close the frame."  (if (equal "capture" (frame-parameter nil 'name))      (delete-frame)))(defadvice org-capture-destroy    (after delete-capture-frame activate)  "Advise capture-destroy to close the frame."  (if (equal "capture" (frame-parameter nil 'name))      (delete-frame)));; Test out calibredb and nov;;;;(use-package! calibredb  :commands calibredb  :config  (setq calibredb-root-dir "~/Dropbox/Documents/Calibre Library"        calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))  (map! :map calibredb-show-mode-map        :ne "?" #'calibredb-entry-dispatch        :ne "o" #'calibredb-find-file        :ne "O" #'calibredb-find-file-other-frame        :ne "V" #'calibredb-open-file-with-default-tool        :ne "s" #'calibredb-set-metadata-dispatch        :ne "e" #'calibredb-export-dispatch        :ne "q" #'calibredb-entry-quit        :ne "." #'calibredb-open-dired        :ne [tab] #'calibredb-toggle-view-at-point        :ne "M-t" #'calibredb-set-metadata--tags        :ne "M-a" #'calibredb-set-metadata--author_sort        :ne "M-A" #'calibredb-set-metadata--authors        :ne "M-T" #'calibredb-set-metadata--title        :ne "M-c" #'calibredb-set-metadata--comments)  (map! :map calibredb-search-mode-map        :ne [mouse-3] #'calibredb-search-mouse        :ne "RET" #'calibredb-find-file        :ne "?" #'calibredb-dispatch        :ne "a" #'calibredb-add        :ne "A" #'calibredb-add-dir        :ne "c" #'calibredb-clone        :ne "d" #'calibredb-remove        :ne "D" #'calibredb-remove-marked-items        :ne "j" #'calibredb-next-entry        :ne "k" #'calibredb-previous-entry        :ne "l" #'calibredb-virtual-library-list        :ne "L" #'calibredb-library-list        :ne "n" #'calibredb-virtual-library-next        :ne "N" #'calibredb-library-next        :ne "p" #'calibredb-virtual-library-previous        :ne "P" #'calibredb-library-previous        :ne "s" #'calibredb-set-metadata-dispatch        :ne "S" #'calibredb-switch-library        :ne "o" #'calibredb-find-file        :ne "O" #'calibredb-find-file-other-frame        :ne "v" #'calibredb-view        :ne "V" #'calibredb-open-file-with-default-tool        :ne "." #'calibredb-open-dired        :ne "b" #'calibredb-catalog-bib-dispatch        :ne "e" #'calibredb-export-dispatch        :ne "r" #'calibredb-search-refresh-and-clear-filter        :ne "R" #'calibredb-search-clear-filter        :ne "q" #'calibredb-search-quit        :ne "m" #'calibredb-mark-and-forward        :ne "f" #'calibredb-toggle-favorite-at-point        :ne "x" #'calibredb-toggle-archive-at-point        :ne "h" #'calibredb-toggle-highlight-at-point        :ne "u" #'calibredb-unmark-and-forward        :ne "i" #'calibredb-edit-annotation        :ne "DEL" #'calibredb-unmark-and-backward        :ne [backtab] #'calibredb-toggle-view        :ne [tab] #'calibredb-toggle-view-at-point        :ne "M-n" #'calibredb-show-next-entry        :ne "M-p" #'calibredb-show-previous-entry        :ne "/" #'calibredb-search-live-filter        :ne "M-t" #'calibredb-set-metadata--tags        :ne "M-a" #'calibredb-set-metadata--author_sort        :ne "M-A" #'calibredb-set-metadata--authors        :ne "M-T" #'calibredb-set-metadata--title        :ne "M-c" #'calibredb-set-metadata--comments)  )(use-package! nov  :mode ("\\.epub\\'" . nov-mode)  :config  (map! :map nov-mode-map        :n "RET" #'nov-scroll-up)  (defun doom-modeline-segment--nov-info ()    (concat     " "     (propertize      (cdr (assoc 'creator nov-metadata))      'face 'doom-modeline-project-parent-dir)     " "     (cdr (assoc 'title nov-metadata))     " "     (propertize      (format "%d/%d"              (1+ nov-documents-index)              (length nov-documents))      'face 'doom-modeline-info)))  (advice-add 'nov-render-title :override #'ignore)  (defun +nov-mode-setup ()    (face-remap-add-relative 'variable-pitch                             :family "Merriweather"                             :height 1.4                             :width 'semi-expanded)    (face-remap-add-relative 'default :height 1.3)    (setq-local line-spacing 0.2                next-screen-context-lines 4                shr-use-colors nil)    (require 'visual-fill-column nil t)    (setq-local visual-fill-column-center-text t                visual-fill-column-width 81                nov-text-width 80)    (visual-fill-column-mode 1)    (hl-line-mode -1)    (add-to-list '+lookup-definition-functions #'+lookup/dictionary-definition)    (setq-local mode-line-format                `((:eval                   (doom-modeline-segment--workspace-name))                  (:eval                   (doom-modeline-segment--window-number))                  (:eval                   (doom-modeline-segment--nov-info))                  ,(propertize                    " %P "                    'face 'doom-modeline-buffer-minor-mode)                  ,(propertize                    " "                    'face (if (doom-modeline--active) 'mode-line 'mode-line-inactive)                    'display `((space                                :align-to                                (- (+ right right-fringe right-margin)                                   ,(* (let ((width (doom-modeline--font-width)))                                         (or (and (= width 1) 1)                                             (/ width (frame-char-width) 1.0)))                                       (string-width                                        (format-mode-line (cons "" '(:eval (doom-modeline-segment--major-mode))))))))))                  (:eval (doom-modeline-segment--major-mode)))))  (add-hook 'nov-mode-hook #'+nov-mode-setup))(use-package! osm);; Completion with Vertico and co!;; Fun fun fun!(use-package! vertico  :config  (setq vertico-resize nil        vertico-count 8));; Set default directory(setq default-directory "~/")